# Create component

# https://babeljs.io/blog/2015/06/07/react-on-es6-plus
rcls:
  description: Create a React ES2015 class
  tpl: |
    import React, { Component } from 'react';
    import PropTypes from 'prop-types';

    class $COMPONENT$ extends Component {
      static defaultProps = {
        $START$
      };

      static propTypes = {
      };

      state = {
      };

      render() {
        return (
          <div>$END$</div>
        );
      }
    }

    export default $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}

rpc:
  description: Create a PureComponent
  tpl: |
    import React, { PureComponent } from 'react';
    import PropTypes from 'prop-types';

    class $COMPONENT$ extends PureComponent {
      static defaultProps = {
        $START$
      };

      static propTypes = {
      };

      render() {
        return (
          <div>$END$</div>
        );
      }
    }

    export default $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}

# Pure function component
# @see https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.qxyk0j6nc
# @see https://facebook.github.io/react/docs/reusable-components.html#stateless-functions
# @see https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components
rpfc:
  description: Create a pure function component
  tpl:
    next: |
      import React from 'react';
      import PropTypes from 'prop-types';

      function $COMPONENT$($PARAMETER$) {
        return (
          <div>$END$</div>
        );
      }

      $COMPONENT$.propTypes = {};
      $COMPONENT$.defaultProps = {};

      export default $COMPONENT$;

    es5: |
      'use strict';

      var React = require('react');
      var PropTypes = require('prop-types');

      function $COMPONENT$($PARAMETER$) {
        return (
          <div>$END$</div>
        );
      }

      $COMPONENT$.propTypes = {};
      $COMPONENT$.defaultProps = {};

      module.exports = $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}
    - {name: 'PARAMETER', defaultValue: '&quot;props&quot;'}

rpfcaf:
  description: Create a pure function component using arrow function
  tpl: |
    import React from 'react';
    import PropTypes from 'prop-types';

    const $COMPONENT$ = ($PARAMETER$) => {
      return (
        <div>$END$</div>
      );
    };

    $COMPONENT$.propTypes = {};
    $COMPONENT$.defaultProps = {};

    export default $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}
    - {name: 'PARAMETER', defaultValue: '&quot;props&quot;'}

rca:
  description: Create a pure function component using arrow function
  tpl: |
    import React from 'react';
    import PropTypes from 'prop-types';

    const $COMPONENT$ = ($PARAMETER$) => (
      <div>$END$</div>
    );

    $COMPONENT$.propTypes = {};
    $COMPONENT$.defaultProps = {};

    export default $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}
    - {name: 'PARAMETER', defaultValue: '&quot;props&quot;'}

rcc:
  description: Create a React.js component
  tpl:
    next: |
      import React from 'react';
      import createReactClass from 'create-react-class';
      import PropTypes from 'prop-types';

      const $COMPONENT$ = createReactClass({
        render() {
          return (
            <div>$END$</div>
          );
        }
      });

      export default $COMPONENT$;

    es5: |
      'use strict';

      var React = require('react');
      var createReactClass = require('create-react-class');
      var PropTypes = require('prop-types');

      var $COMPONENT$ = createReactClass({
        render: function() {
          return (
            <div>$END$</div>
          );
        }
      });

      module.exports = $COMPONENT$;

  variables:
    - {name: 'COMPONENT', expression: 'fileNameWithoutExtension()'}

# Import react-dom
rdom:
  description: import ReactDOM
  tpl:
    next: |
      import ReactDOM from 'react-dom';
      $END$

    es5: |
      var ReactDOM = require('react-dom');
      $END$

# Nested component
rccc:
  description: Create a sub component
  tpl: |
    $START$ = createReactClass({
      render: function() {
        return (
          $END$
        );
      }
    });

  variables:
    - {name: 'START'}

# cdm
cdm:
  description: componentDidMount
  tpl: |
    componentDidMount: function() {
      $END$
    },

# cdu
cdu:
  description: componentDidUpdate
  tpl: |
    componentDidUpdate: function(prevProps, prevState) {
      $END$
    },

# cwm
cwm:
  description: componentWillMount
  tpl: |
    componentWillMount: function() {
      $END$
    },

# UNSAFE_cwm
uscwm:
  description: UNSAFE_componentWillMount()
  tpl: |
    UNSAFE_componentWillMount: function() {
      $END$
    },

# cwr
cwr:
  description: componentWillReceiveProps
  tpl: |
    componentWillReceiveProps: function(nextProps) {
      $END$
    },

# UNSAFE_componentWillReceiveProps
uscwr:
  description: UNSAFE_componentWillReceiveProps
  tpl: |
    UNSAFE_componentWillReceiveProps: function(nextProps) {
      $END$
    },

# UNSAFE_componentWillUpdate
uscwu:
  description: UNSAFE_componentWillUpdate
  tpl: |
    UNSAFE_componentWillUpdate: function(nextProps, nextState) {
      $END$
    },

# cwu
cwu:
  description: componentWillUpdate
  tpl: |
    componentWillUpdate: function(nextProps, nextState) {
      $END$
    },

#cwum
cwum:
  description: componentWillUnmount
  tpl: |
    componentWillUnmount: function() {
      $END$
    },

# getSnapshotBeforeUpdate
gsbu:
  description: getSnapshotBeforeUpdate
  tpl: |
    getSnapshotBeforeUpdate: function(prevProps, prevState) {
      $END$
    },

# componentDidCatch
cdc:
  description: componentDidCatch
  tpl: |
    componentDidCatch: function() {
      $END$
    },

# displayName
dn:
  description: displayName
  tpl: "displayName: '$END$',"

dnp:
  description: displayName as a property
  tpl: "$START$.displayName = '$END$';"
  variables:
    - {name: 'START'}

# ReactDOM.findDOMNode
fdn:
  description: findDOMNode
  tpl: findDOMNode($END$);

rfdn:
  description: ReactDOM.findDOMNode
  tpl: ReactDOM.findDOMNode($END$);

rcp:
  description: ReactDOM.createPortal
  tpl: ReactDOM.createPortal($START$, $END$);
  variables:
    - {name: 'START'}

rhy:
  description: ReactDOM.hydrate
  tpl: ReactDOM.hydrate($START$, $END$);
  variables:
    - {name: 'START'}

rucan:
  description: ReactDOM.unmountComponentAtNode
  tpl: ReactDOM.unmountComponentAtNode($END$);

fup:
  description: forceUpdate();
  tpl: forceUpdate($END$);

#gdp
gdp:
  description: getDefaultProps
  tpl: |
    getDefaultProps: function() {
      return {
        $END$
      };
    },

# getInitialState
gis:
  description: getInitialState
  tpl: |
    getInitialState: function() {
      return {
        $START$: $END$
      };
    },

  variables:
    - {name: 'START'}

# isMounted
ism:
  tpl: isMounted()

#
props:
  tpl: this.props

# destructuring props
dprp:
  tpl: const { $END$ } = this.props;

# set inner HTML
dsih:
  description: dangerouslySetInnerHTML
  tpl: "dangerouslySetInnerHTML={{__html: '$END$'}}"

# propTypes
pts:
  description: propTypes
  tpl: |
    propTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# PropType
pt:
  description: PropTypes.
  tpl: "$START$: PropTypes.$END$,"
  variables:
    - {name: 'START'}

refs:
  tpl: this.refs.$END$

# render
ren:
  description: render()
  tpl: |
    render: function() {
      return (
        <div>$END$</div>
      );
    }

# shouldComponentUpdate
scu:
  description: shouldComponentUpdate
  tpl: |
    shouldComponentUpdate: function(nextProps, nextState) {
      $END$
    },

# sst
sst:
  description: this.setState
  tpl: |
    this.setState({
      $START$: $END$,
    });
  variables:
    - {name: 'START'}

# f sst
fsst:
  description: functional setState
  tpl: |
    this.setState((prevState) => {
      return $END$;
    });;

#
state:
  tpl: this.state.$END$

# destructuring state
dst:
  tpl: const { $END$ } = this.state;

# context
ct:
  description: contextTypes
  tpl: |
    contextTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# childContextTypes
cct:
  description: childContextTypes
  tpl: |
    childContextTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# this.context
ctx:
  description: this.context
  tpl: this.context.$END$

# getChildContext
gcc:
  description: getChildContext
  tpl: |
    getChildContext: function() {
      return {
        $START$: $END$
      };
    },

  variables:
    - {name: 'START'}

# state
st:
  description: state
  tpl: |
    state = {
      $START$: $END$,
    },

  variables:
    - {name: 'START'}

# static
# https://babeljs.io/blog/2015/06/07/react-on-es6-plus
# https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers
# static propTypes
sdn:
  description: static displayName
  tpl: static displayName = '$END$';

spt:
  description: static propTypes
  tpl: |
    static propTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static defaultProps
sdp:
  description: static defaultProps
  tpl: |
    static defaultProps = {
      $START$: $END$,
    };

  variables:
    - {name: 'START'}

# static context
sct:
  description: static contextTypes
  tpl: |
    static contextTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static childContextTypes
scct:
  description: static childContextTypes
  tpl: |
    static childContextTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static getDerivedStateFromProps
sgds:
  description: static getDerivedStateFromProps
  tpl: |
    static getDerivedStateFromProps(nextProps, prevState) {
      $END$
    },

# constructor
cstt:
  description: constructor(props)
  tpl: |
    constructor(props$START$) {
      super(props$END$);
    }

  variables:
    - {name: 'START'}

# transition add-on
tsn:
  description: transitionName
  tpl: transitionName="$END$"

tsa:
  description: transitionAppear
  tpl: transitionAppear={$END$}

tse:
  description: transitionEnter
  tpl: transitionEnter={$END$}

tsl:
  description: transitionLeave
  tpl: transitionLeave={$END$}

tset:
  description: transitionEnterTimeout
  tpl: transitionEnterTimeout={$END$}

tslt:
  description: transitionLeaveTimeout
  tpl: transitionLeaveTimeout={$END$}

tsat:
  description: transitionAppearTimeout
  tpl: transitionAppearTimeout={$END$}

### ReactDOMServer ###
rdoms:
  description: import ReactDOMServer
  tpl:
    next: |
      import ReactDOMServer from 'react-dom/server';
      $END$

    es5: |
      var ReactDOMServer = require('react-dom/server');
      $END$

rdsrts:
  description: ReactDOMServer.renderToString
  tpl: ReactDOMServer.renderToString($END$);

rdsrtsm:
  description: ReactDOMServer.renderToStaticMarkup($END$)
  tpl: ReactDOMServer.renderToString($END$);

rdsrtns:
  description: ReactDOMServer.renderToNodeStream
  tpl: ReactDOMServer.renderToNodeStream($END$);

rdsrtsns:
  description: ReactDOMServer.renderToStaticNodeStream
  tpl: ReactDOMServer.renderToStaticNodeStream($END$);

rsm:
  description: React.StrictMode
  tpl: |
    <React.StrictMode>
      $END$
    </React.StrictMode>

# Fragments
rf:
  description: React.Fragment
  tpl: |
    <React.Fragment>
      $END$
    </React.Fragment>

# Fragments Short Syntax
rfs:
  description: React.Fragment
  tpl: |
    <>
      $END$
    </>

# Ref
# createRef
rcr:
  description: React.createRef()
  tpl: React.createRef();

# Forwarding Refs
rfr:
  description: React.forwardRef
  tpl: |
    React.forwardRef((props, ref) => {
      return $END$;
    });

#  Context
rcctx:
  description: React.createContext
  tpl: |
    const { Provider, Consumer } = React.createContext($END$);

ctxprvd:
  description: React context Provider
  tpl: |
    <Provider value={$START$}>
      $END$
    </Provider>
  variables:
    - {name: 'START'}

ctxcsm:
  description: React context Consumer
  tpl: |
    <Consumer>
      {value => $END$}
    </Consumer>
